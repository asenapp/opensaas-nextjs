// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  emailVerified    DateTime?
  password         String?
  name             String?
  image            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  isAdmin          Boolean           @default(false)
  
  // Subscription fields
  stripeCustomerId     String?       @unique
  subscriptionStatus   String?       // 'active', 'canceled', 'past_due', etc.
  subscriptionPlan     String?       // 'hobby', 'pro'
  subscriptionPeriodEnd DateTime?
  
  // Credits system
  credits          Int               @default(3)
  
  // Relations
  accounts         Account[]
  sessions         Session[]
  tasks            Task[]
  gptResponses     GptResponse[]
  files            File[]
  
  // Analytics
  lastActiveAt     DateTime?
  pageViews        Int               @default(0)
  
  @@index([email])
  @@index([stripeCustomerId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id             String    @id @default(cuid())
  userId         String
  description    String
  time           String    @default("1")
  isDone         Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model GptResponse {
  id             String    @id @default(cuid())
  userId         String
  content        String    @db.Text
  createdAt      DateTime  @default(now())
  
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model File {
  id             String    @id @default(cuid())
  userId         String
  name           String
  type           String
  size           Int
  url            String
  uploadedAt     DateTime  @default(now())
  
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model DailyStats {
  id             String    @id @default(cuid())
  date           DateTime  @unique
  
  totalPageViews Int       @default(0)
  totalUsers     Int       @default(0)
  paidUsers      Int       @default(0)
  totalRevenue   Float     @default(0)
  
  // Analytics data
  sources        Json?     // Traffic sources
  usersByPlan    Json?     // Users breakdown by plan
  
  createdAt      DateTime  @default(now())
  
  @@index([date])
}

model ContactFormMessage {
  id             String    @id @default(cuid())
  email          String
  message        String    @db.Text
  createdAt      DateTime  @default(now())
  
  @@index([createdAt])
}

model PageViewSource {
  id             String    @id @default(cuid())
  date           DateTime
  source         String
  medium         String?
  campaign       String?
  count          Int       @default(1)
  
  @@unique([date, source, medium, campaign])
  @@index([date])
}